import streamlit as st
from PIL import Image
import torch
from torchvision import transforms
from utils.model import get_model, load_model
import io

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph√¢n lo·∫°i L·ªói S·∫£n Ph·∫©m ƒê√∫c",
    page_icon="üè≠",
    layout="wide",
)

# --- CSS T√πy ch·ªânh ---
st.markdown("""
<style>
    /* General layout improvements */
    .st-emotion-cache-1y4p8pa {
        padding-top: 2rem;
    }
    .st-emotion-cache-1v0mbdj {
        max-width: 95%;
    }
    /* Title styles */
    .main-title {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1E90FF;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-title {
        font-size: 1.5rem;
        color: #4682B4;
        text-align: center;
        margin-bottom: 2rem;
    }
    /* Result text styles */
    .result-text {
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        padding: 0.5rem;
        border-radius: 10px;
        margin-top: 10px;
    }
    .result-ok {
        color: #2E8B57;
        background-color: #D4EDDA;
    }
    .result-def {
        color: #A52A2A;
        background-color: #F8D7DA;
    }
</style>
""", unsafe_allow_html=True)


# --- H√†m x·ª≠ l√Ω ---
@st.cache_resource
def load_pytorch_model():
    """T·∫£i v√† cache m√¥ h√¨nh PyTorch."""
    model = get_model()
    try:
        model_path = 'final_model.pth'
        model = load_model(model, model_path)
        model.eval()
        return model
    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp 'final_model.pth'. Vui l√≤ng ƒë·∫£m b·∫£o t·ªáp m√¥ h√¨nh n·∫±m trong th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi t·∫£i m√¥ h√¨nh: {e}")
        return None

def predict(model, image_data):
    """D·ª± ƒëo√°n m·ªôt ·∫£nh l√† T·ªët (OK) hay c√≥ L·ªói (Defective)."""
    if model is None:
        return None, None

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)

    # C√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω ·∫£nh ph·∫£i gi·ªëng v·ªõi l√∫c hu·∫•n luy·ªán m√¥ h√¨nh
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.Grayscale(num_output_channels=3), # Chuy·ªÉn ·∫£nh x√°m th√†nh 3 k√™nh ƒë·ªÉ h·ª£p v·ªõi m√¥ h√¨nh pre-trained
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    try:
        image = Image.open(io.BytesIO(image_data)).convert("RGB")
        image_tensor = transform(image).unsqueeze(0).to(device)

        with torch.no_grad():
            outputs = model(image_tensor)
            probabilities = torch.nn.functional.softmax(outputs, dim=1)
            confidence, predicted_idx = torch.max(probabilities, 1)
            predicted_class = predicted_idx.item()

        return predicted_class, confidence.item()
    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        return None, None


# --- Giao di·ªán ·ª©ng d·ª•ng ---

# Ti√™u ƒë·ªÅ
st.markdown("<h1 class='main-title'>üè≠ ·ª®ng d·ª•ng Ph√°t hi·ªán L·ªói S·∫£n ph·∫©m ƒê√∫c</h1>", unsafe_allow_html=True)
st.markdown("<p class='sub-title'>T·∫£i l√™n h√¨nh ·∫£nh s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra ch·∫•t l∆∞·ª£ng b·∫±ng AI</p>", unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh v·ªõi spinner
with st.spinner("ƒêang t·∫£i m√¥ h√¨nh, vui l√≤ng ch·ªù..."):
    model = load_pytorch_model()

# Widget t·∫£i file
uploaded_files = st.file_uploader(
    "Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ·∫£nh s·∫£n ph·∫©m...",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True
)

st.divider()

# X·ª≠ l√Ω v√† hi·ªÉn th·ªã k·∫øt qu·∫£ cho t·ª´ng file
if uploaded_files and model is not None:
    st.header("üí° K·∫øt qu·∫£ Ph√¢n lo·∫°i")
    
    # Thi·∫øt l·∫≠p layout d·∫°ng l∆∞·ªõi v·ªõi 3 c·ªôt
    num_columns = 3
    cols = st.columns(num_columns)
    
    # L·∫∑p qua t·ª´ng t·ªáp ƒë√£ t·∫£i l√™n
    for index, uploaded_file in enumerate(uploaded_files):
        image_data = uploaded_file.getvalue()
        
        # ƒê·∫∑t k·∫øt qu·∫£ v√†o c·ªôt t∆∞∆°ng ·ª©ng (col 0, 1, 2, r·ªìi quay l·∫°i 0, ...)
        col = cols[index % num_columns]
        
        with col:
            # D√πng container ƒë·ªÉ ƒë√≥ng khung cho m·ªói k·∫øt qu·∫£
            with st.container(border=True):
                st.image(image_data, caption=f"{uploaded_file.name}",width=True)
                
                # D·ª± ƒëo√°n v√† l·∫•y k·∫øt qu·∫£ cho t·ª´ng ·∫£nh
                predicted_class, confidence = predict(model, image_data)
                
                if predicted_class is not None:
                    class_names = {0: 'L·ªói', 1: 'T·ªët'} # Gi·∫£ ƒë·ªãnh 0 l√† L·ªói, 1 l√† T·ªët
                    result = class_names.get(predicted_class, "Kh√¥ng x√°c ƒë·ªãnh")
                    confidence_percent = confidence * 100

                    if result == 'T·ªët':
                        st.markdown(f"<div class='result-text result-ok'>‚úîÔ∏è T·ªêT ({confidence_percent:.1f}%)</div>", unsafe_allow_html=True)
                    else:
                        st.markdown(f"<div class='result-text result-def'>‚ùå L·ªñI ({confidence_percent:.1f}%)</div>", unsafe_allow_html=True)
                else:
                    st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh n√†y.")

elif not uploaded_files:
    st.info("Vui l√≤ng t·∫£i ·∫£nh l√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n lo·∫°i.")

# --- Sidebar ---
st.sidebar.title("üìñ H∆∞·ªõng d·∫´n")
st.sidebar.info(
    """
    1. **T·∫£i ·∫£nh l√™n:** Nh·∫•n v√†o 'Browse files' v√† ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ·∫£nh s·∫£n ph·∫©m ƒë√∫c b·∫°n mu·ªën ki·ªÉm tra.
    2. **Xem k·∫øt qu·∫£:** M√¥ h√¨nh s·∫Ω t·ª± ƒë·ªông ph√¢n lo·∫°i t·ª´ng ·∫£nh l√† 'T·ªët' ho·∫∑c 'L·ªói' v√† hi·ªÉn th·ªã k·∫øt qu·∫£ ngay b√™n d∆∞·ªõi.
    3. **Ph√¢n t√≠ch s√¢u:** N·∫øu s·∫£n ph·∫©m b·ªã l·ªói, b·∫°n c√≥ th·ªÉ chuy·ªÉn qua trang **'üîç Ph√¢n T√≠ch Lo·∫°i L·ªói'** (n·∫øu c√≥) ƒë·ªÉ xem chi ti·∫øt.
    """
)
st.sidebar.title("V·ªÅ d·ª± √°n")
st.sidebar.success(
    """
    D·ª± √°n n√†y s·ª≠ d·ª•ng m√¥ h√¨nh h·ªçc s√¢u **EfficientNetV2-S** ƒë·ªÉ ph√¢n lo·∫°i s·∫£n ph·∫©m.
    ƒê·ªìng th·ªùi, √°p d·ª•ng c√°c thu·∫≠t to√°n x·ª≠ l√Ω ·∫£nh ƒë·ªÉ x√°c ƒë·ªãnh c√°c lo·∫°i l·ªói c·ª• th·ªÉ nh∆∞ 'N·ª©t', 'M·∫ª', 'L·ªó kh√≠'.
    """
)
