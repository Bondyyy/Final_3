import streamlit as st
import cv2
import numpy as np
from PIL import Image
from utils.analysis import analyze_defect_types_pro, segment_image_hybrid

st.set_page_config(
    page_title="Ph√¢n T√≠ch Chi Ti·∫øt L·ªói",
    page_icon="üîç",
    layout="wide",
)

st.markdown("""
<style>
    .st-emotion-cache-1y4p8pa {
        padding-top: 2rem;
    }
    .main-title {
        font-size: 2.2rem;
        font-weight: bold;
        color: #FF4B4B;
        text-align: center;
        margin-bottom: 2rem;
    }
</style>
""", unsafe_allow_html=True)


st.markdown("<h1 class='main-title'>üîç Ph√¢n T√≠ch v√† Khoanh V√πng L·ªói</h1>", unsafe_allow_html=True)

uploaded_file = st.file_uploader(
    "T·∫£i l√™n m·ªôt ·∫£nh s·∫£n ph·∫©m b·ªã l·ªói ƒë·ªÉ ph√¢n t√≠ch...",
    type=["jpg", "jpeg", "png"],
    key="analysis_uploader"
)

if uploaded_file is not None:
    # ƒê·ªçc ·∫£nh t·ª´ file ƒë√£ upload
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img_cv = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

    # --- C·ªôt hi·ªÉn th·ªã ---
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Ph√¢n t√≠ch lo·∫°i l·ªói")
        with st.spinner("ƒêang t√¨m v√† ph√¢n lo·∫°i l·ªói..."):
            try:
                num_defects, defect_types, img_out = analyze_defect_types_pro(img_cv.copy())

                st.image(img_out, channels="BGR", caption=f"Ph√°t hi·ªán {num_defects} v√πng l·ªói.")

                if num_defects > 0:
                    st.success(f"**S·ªë l·ªói ph√°t hi·ªán:** {num_defects}")
                    st.write("**C√°c lo·∫°i l·ªói c√≥ th·ªÉ c√≥:**")
                    # ƒê·∫øm s·ªë l∆∞·ª£ng m·ªói lo·∫°i l·ªói
                    defect_counts = {t: defect_types.count(t) for t in set(defect_types)}
                    for dtype, count in defect_counts.items():
                        st.markdown(f"- **{dtype}:** {count} v√πng")
                else:
                    st.info("Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c v√πng l·ªói r√µ r√†ng b·∫±ng ph∆∞∆°ng ph√°p n√†y.")

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch: {e}")

    # with col2:
    #     st.subheader("Ph√¢n v√πng ·∫£nh (Segmentation)")
    #     with st.spinner("ƒêang th·ª±c hi·ªán ph√¢n v√πng ·∫£nh..."):
    #         try:
    #             # Resize ƒë·ªÉ x·ª≠ l√Ω nhanh h∆°n
    #             h, w, _ = img_cv.shape
    #             img_resized = cv2.resize(img_cv, (256, int(256 * h/w)))

    #             segmented_img = segment_image_hybrid(img_resized)

    #             # Hi·ªÉn th·ªã
    #             display_col1, display_col2 = st.columns(2)
    #             with display_col1:
    #                 st.image(img_resized, channels="BGR", caption="·∫¢nh g·ªëc (resized)")
    #             with display_col2:
    #                 st.image(segmented_img, channels="BGR", caption="·∫¢nh ƒë√£ ph√¢n v√πng")

    #             st.info(
    #             """
    #             **Gi·∫£i th√≠ch:**
    #             - Ph∆∞∆°ng ph√°p n√†y s·ª≠ d·ª•ng thu·∫≠t to√°n gom c·ª•m (DBSCAN + Fuzzy C-Means) ƒë·ªÉ nh√≥m c√°c pixel c√≥ m√†u s·∫Øc t∆∞∆°ng t·ª± nhau.
    #             - C√°c v√πng c√≥ m√†u kh√°c bi·ªát (ƒë∆∞·ª£c t√¥ m√†u ng·∫´u nhi√™n) c√≥ th·ªÉ l√† c√°c v√πng l·ªói ho·∫∑c c√°c v√πng c√≥ ƒë·∫∑c ƒëi·ªÉm b·ªÅ m·∫∑t kh√°c th∆∞·ªùng.
    #             """
    #             )

    #         except Exception as e:
    #             st.error(f"ƒê√£ x·∫£y ra l·ªói khi ph√¢n v√πng: {e}")

else:
    st.info("Vui l√≤ng t·∫£i l√™n m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")